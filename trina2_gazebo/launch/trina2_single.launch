<launch>

    <!-- Arguments -->
    <!-- Robot name -->
    <arg name="robot_name" default="trina2"/>
    <arg name="right_prefix" default="right_arm_" />
    <arg name="left_prefix" default="left_arm_" />

    <!-- Arm and gripper type -->
    <arg name="arm" default="gen3"/>
    <!-- Number of degrees of freedom of the arm -->
    <arg name="dof" default="7" if="$(eval arg('arm') == 'gen3')"/> 
    <!-- True if the arm has a Vision module -->
    <arg name="vision" default="true"/> 
    <arg name="gripper" default="robotiq_2f_85" />
    <arg name="cyclic_data_publish_rate" default="40"/> <!--Hz-->


    <!-- Initial position in Gazebo -->
    <arg name="x0" default="3"/>
    <arg name="y0" default="-8"/>
    <arg name="z0" default="0"/>
    <arg name="yaw" default="1.57" />
    

    <!-- Spawn the robot in Gazebo -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" 
        output="screen" args="-urdf -param /robot_description -model $(arg robot_name) 
            -x $(arg x0) 
            -y $(arg y0) 
            -z $(arg z0) 
            -Y $(arg yaw)

            -J $(arg right_prefix)joint_1 -2.8
            -J $(arg right_prefix)joint_2 1.57
            -J $(arg right_prefix)joint_3 0.0
            -J $(arg right_prefix)joint_4 1.15
            -J $(arg right_prefix)joint_5 0.2
            -J $(arg right_prefix)joint_6 1.95
            -J $(arg right_prefix)joint_7 -3.05

            -J $(arg left_prefix)joint_1 -2.25
            -J $(arg left_prefix)joint_2 1.57
            -J $(arg left_prefix)joint_3 1.57
            -J $(arg left_prefix)joint_4 1.57
            -J $(arg left_prefix)joint_5 0
            -J $(arg left_prefix)joint_6 0
            -J $(arg left_prefix)joint_7 1.57"/> 

    <!-- Load controller configuration files from trina2_control package -->
    <!-- Joint controller -->
    <rosparam file="$(find trina2_control)/config/arms/dual_arm_joint_position_controllers.yaml"
        subst_value="true" command="load" />
    <!-- Gripper controller -->
    <rosparam file="$(find trina2_control)/config/grippers/dual_arm_gripper_action_controller_parameters.yaml"
        subst_value="true" command="load" />
    <!-- Mobile base controller -->
    <rosparam file="$(find trina2_control)/config/base/mobile_base_controller.yaml" command="load" />
    <!-- Camera controller -->
    <rosparam file="$(find trina2_control)/config/camera/main_camera_controller.yaml" command="load" />

    <!-- Start the arm trajectory controllers -->
    <node name="$(arg arm)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args=" --stopped
            $(arg right_prefix)$(arg arm)_joint_trajectory_controller 
            $(arg left_prefix)$(arg arm)_joint_trajectory_controller" />

    <!-- Start the arm position controllers -->
    <node name="$(arg arm)_position_controllers_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args="
            $(arg right_prefix)joint_1_position_controller
            $(arg right_prefix)joint_2_position_controller
            $(arg right_prefix)joint_3_position_controller
            $(arg right_prefix)joint_4_position_controller
            $(arg right_prefix)joint_5_position_controller
            $(arg right_prefix)joint_6_position_controller
            $(arg right_prefix)joint_7_position_controller
            
            $(arg left_prefix)joint_1_position_controller
            $(arg left_prefix)joint_2_position_controller
            $(arg left_prefix)joint_3_position_controller
            $(arg left_prefix)joint_4_position_controller
            $(arg left_prefix)joint_5_position_controller
            $(arg left_prefix)joint_6_position_controller
            $(arg left_prefix)joint_7_position_controller"/>

    <!-- Start other arm controllers -->
    <node name="$(arg arm)_controllers_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args="
            $(arg right_prefix)joint_state_controller 
            $(arg right_prefix)$(arg gripper)_gripper_controller

            $(arg left_prefix)joint_state_controller 
            $(arg left_prefix)$(arg gripper)_gripper_controller"/>

    <!-- Start base and camera controllers -->
    <node name="other_controllers_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args="
            base_controller
            main_camera_pitch_controller
            main_camera_yaw_controller"/>


    <!-- Control Interface -->
    <!-- Start camera control interface -->
    <node name="main_camera_interface" pkg="trina2_control" type="main_camera_control_interface"
    respawn="false" output="screen" />

    <!-- Restore this part when mobile manipulation is needed-->
    <?ignore
    <!-- Start simulated Kortex Driver -->
    <!--launch-prefix="gdb -ex run args"-->
    <node name="$(arg right_prefix)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen">
        <param name="sim" value="true"/>
        <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
        <param name="arm" value="$(arg arm)"/>
        <param name="gripper" value="$(arg gripper)"/>
        <param name="dof" value="$(arg dof)"/>
        <param name="robot_name" value="$(arg robot_name)"/>
        <param name="prefix" value="$(arg right_prefix)"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/right_joint_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/right_twist_limits.yaml" subst_value="true"/>
        <!-- If there is a gripper, load the active joint names for it -->
        <rosparam command="load" file="$(find trina2_description)/grippers/config/right_joint_limits.yaml" subst_value="true"/>
    </node>
    <node name="$(arg left_prefix)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen">
        <param name="sim" value="true"/>
        <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
        <param name="arm" value="$(arg arm)"/>
        <param name="gripper" value="$(arg gripper)"/>
        <param name="dof" value="$(arg dof)"/>
        <param name="robot_name" value="$(arg robot_name)"/>
        <param name="prefix" value="$(arg left_prefix)"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/left_joint_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/left_twist_limits.yaml" subst_value="true"/>
        <!-- If there is a gripper, load the active joint names for it -->
        <rosparam command="load" file="$(find trina2_description)/grippers/config/left_joint_limits.yaml" subst_value="true"/>
    </node>
    
    <!-- Start MoveIt main executable -->
    <!-- TODO Find cleaner way to do that and that will work with other arms -->
    <include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_$(arg gripper)_move_it_config/launch/move_group.launch">
        <arg name="dof" value="$(arg dof)"/>
        <arg name="prefix" value="$(arg right_prefix)"/>
    </include>
    <!-- TODO Cannot run two MoveIt at the same time
    <include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_$(arg gripper)_move_it_config/launch/move_group.launch">
        <arg name="dof" value="$(arg dof)"/>
        <arg name="prefix" value="$(arg left_prefix)"/>
    </include> -->
    ?>
    
    <!-- Start robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen" />


    <!-- Start the robot in the right config if it doesn't--> 
    <node name="starting_position_controlller" pkg="trina2_control" type="get_into_start_position.py" /> 

    <!-- Start the robot in the right config if it doesn't--> 
    <node name="boot_message" pkg="trina2_control" type="send_boot_message.py" 
          args = "$(arg robot_name)"/>

</launch>